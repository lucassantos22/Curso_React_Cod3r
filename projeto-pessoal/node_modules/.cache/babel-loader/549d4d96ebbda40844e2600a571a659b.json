{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/lucas/TI/Curso-React-Cod3r/projeto-pessoal/src/components/Home.js\";\nimport React, { Component } from 'react';\nimport Table from './templates/Table';\nimport Form from './templates/Form';\nimport { Card, Nav, Spinner } from 'react-bootstrap';\nimport { Check, CardText, ListTask, Exclamation } from 'react-bootstrap-icons';\nimport { connect } from 'react-redux';\nimport { changeVision } from '../store/actions/whichTableIsVisible';\nimport { updateTasks } from '../store/actions/tasks';\nimport { updateLoading } from '../store/actions/loading';\nimport axios from 'axios';\nconst URL = 'https://todo-backend-express.herokuapp.com/';\n\nconst mapStateToProps = state => {\n  return {\n    whichTableIsVisible: state.whichTableIsVisible.whichTableIsVisible,\n    tasks: state.tasks.tasks,\n    loading: state.loading.loading\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    changeVision(trueOrFalse) {\n      dispatch(changeVision(trueOrFalse));\n    },\n\n    updateTasks(userList) {\n      dispatch(updateTasks(userList));\n    },\n\n    updateLoading(trueOrFalse) {\n      dispatch(updateLoading(trueOrFalse));\n    }\n\n  };\n};\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  async componentWillMount() {\n    this.props.updateLoading(true);\n\n    try {\n      await this.updateTasks();\n    } finally {\n      this.props.updateLoading(false);\n    }\n  }\n\n  async componentDidUpdate(prevState) {\n    if (prevState.loading !== this.props.loading) return;\n    this.updateTasks();\n  }\n\n  async updateTasks() {\n    this.props.updateLoading(false);\n    const tasks = await axios.get(URL);\n    this.sortTasksByOrder(tasks.data);\n\n    if (JSON.stringify(tasks.data) == JSON.stringify(this.props.tasks)) {\n      return;\n    }\n\n    this.props.updateTasks(tasks.data);\n  }\n\n  sortTasksByOrder(taskList) {\n    taskList.sort((firstTask, secondTask) => {\n      return firstTask.order < secondTask.order ? -1 : firstTask.order > secondTask.order ? 1 : 0;\n    });\n  }\n\n  async completeTask(url, completed) {\n    await axios.patch(url, {\n      completed\n    });\n    await this.updateTasks();\n  }\n\n  async deleteCompletedTasks() {\n    this.props.updateLoading(true);\n    const completedTasks = this.props.tasks.filter(task => task.completed);\n\n    try {\n      for (const completedTask of completedTasks) {\n        await axios.delete(completedTask.url);\n      }\n    } finally {\n      this.props.updateLoading(false);\n    }\n\n    if (completedTasks.length === 0) {\n      alert('Não existem tarefas completas no momento');\n      return;\n    }\n\n    await this.updateTasks();\n  }\n\n  async editTask(url, title) {\n    if (title.length === 0) {\n      alert('A tarefa deve ter um título');\n    }\n\n    await axios.patch(url, {\n      title\n    });\n    await this.updateTasks();\n  }\n\n  async deleteTask(url) {\n    const confirmation = window.confirm('Tem certeza que deseja excluir?');\n\n    if (confirmation) {\n      this.props.updateLoading(true);\n\n      try {\n        await axios.delete(url);\n        await this.updateTasks();\n      } finally {\n        this.props.updateLoading(false);\n      }\n    }\n  }\n\n  filterTasksCompleteds() {\n    return this.props.tasks.filter(task => task.completed);\n  }\n\n  filterTasksNotCompleteds() {\n    return this.props.tasks.filter(task => !task.completed);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [this.props.loading ? /*#__PURE__*/_jsxDEV(Spinner, {\n        animation: \"border\",\n        variant: \"info\",\n        style: {\n          position: 'absolute',\n          zIndex: '1',\n          left: '50%',\n          top: '40%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 38\n      }, this) : null, /*#__PURE__*/_jsxDEV(Card, {\n        children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n          children: /*#__PURE__*/_jsxDEV(Nav, {\n            variant: \"tabs\",\n            defaultActiveKey: \"#first\",\n            children: [/*#__PURE__*/_jsxDEV(Nav.Item, {\n              children: /*#__PURE__*/_jsxDEV(Nav.Link, {\n                active: this.props.whichTableIsVisible === 1 ? true : false,\n                onClick: () => this.props.changeVision(1),\n                children: /*#__PURE__*/_jsxDEV(ListTask, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 143,\n                  columnNumber: 139\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Nav.Item, {\n              children: /*#__PURE__*/_jsxDEV(Nav.Link, {\n                active: this.props.whichTableIsVisible === 2 ? true : false,\n                onClick: () => this.props.changeVision(2),\n                children: /*#__PURE__*/_jsxDEV(Exclamation, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 146,\n                  columnNumber: 139\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Nav.Item, {\n              children: /*#__PURE__*/_jsxDEV(Nav.Link, {\n                active: this.props.whichTableIsVisible === 3 ? true : false,\n                onClick: () => this.props.changeVision(3),\n                children: /*#__PURE__*/_jsxDEV(Check, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 149,\n                  columnNumber: 139\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Nav.Item, {\n              children: /*#__PURE__*/_jsxDEV(Nav.Link, {\n                active: this.props.whichTableIsVisible === 4 ? true : false,\n                onClick: () => this.props.changeVision(4),\n                children: /*#__PURE__*/_jsxDEV(CardText, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 152,\n                  columnNumber: 139\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n          children: this.props.whichTableIsVisible === 1 ? /*#__PURE__*/_jsxDEV(Table, {\n            title: \"Tarefas\",\n            deleteTask: url => this.deleteTask(url),\n            completeTask: (url, completed) => this.completeTask(url, completed),\n            editTask: (url, title) => this.editTask(url, title),\n            tasks: this.props.tasks,\n            completed: \"trueAndFalse\",\n            deleteCompletedTasks: () => this.deleteCompletedTasks()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 21\n          }, this) : this.props.whichTableIsVisible === 2 ? /*#__PURE__*/_jsxDEV(Table, {\n            title: \"A fazer\",\n            deleteTask: url => this.deleteTask(url),\n            completeTask: (url, completed) => this.completeTask(url, completed),\n            editTask: (url, title) => this.editTask(url, title),\n            tasks: this.filterTasksNotCompleteds(),\n            deleteCompletedTasks: () => this.deleteCompletedTasks()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 21\n          }, this) : this.props.whichTableIsVisible === 3 ? /*#__PURE__*/_jsxDEV(Table, {\n            title: \"Conlu\\xEDdas\",\n            deleteTask: url => this.deleteTask(url),\n            completeTask: (url, completed) => this.completeTask(url, completed),\n            editTask: (url, title) => this.editTask(url, title),\n            tasks: this.filterTasksCompleteds(),\n            completed: true,\n            deleteCompletedTasks: () => this.deleteCompletedTasks()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 21\n          }, this) : /*#__PURE__*/_jsxDEV(Form, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","map":{"version":3,"sources":["/home/lucas/TI/Curso-React-Cod3r/projeto-pessoal/src/components/Home.js"],"names":["React","Component","Table","Form","Card","Nav","Spinner","Check","CardText","ListTask","Exclamation","connect","changeVision","updateTasks","updateLoading","axios","URL","mapStateToProps","state","whichTableIsVisible","tasks","loading","mapDispatchToProps","dispatch","trueOrFalse","userList","Home","constructor","props","componentWillMount","componentDidUpdate","prevState","get","sortTasksByOrder","data","JSON","stringify","taskList","sort","firstTask","secondTask","order","completeTask","url","completed","patch","deleteCompletedTasks","completedTasks","filter","task","completedTask","delete","length","alert","editTask","title","deleteTask","confirmation","window","confirm","filterTasksCompleteds","filterTasksNotCompleteds","render","position","zIndex","left","top"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Table from './templates/Table';\nimport Form from './templates/Form';\n\nimport {Card, Nav, Spinner} from 'react-bootstrap';\nimport {Check, CardText, ListTask, Exclamation} from 'react-bootstrap-icons';\n\nimport {connect} from 'react-redux';\nimport {changeVision} from '../store/actions/whichTableIsVisible';\nimport {updateTasks} from '../store/actions/tasks';\nimport {updateLoading} from '../store/actions/loading';\n\nimport axios from 'axios';\n\nconst URL = 'https://todo-backend-express.herokuapp.com/';\n\nconst mapStateToProps = state =>{\n    return {\n        whichTableIsVisible: state.whichTableIsVisible.whichTableIsVisible,\n        tasks: state.tasks.tasks,\n        loading: state.loading.loading\n    }\n}\n\nconst mapDispatchToProps = dispatch =>{\n    return {\n        changeVision(trueOrFalse) {\n            dispatch(changeVision(trueOrFalse));\n        },\n        updateTasks(userList){\n            dispatch(updateTasks(userList));\n        },\n        updateLoading(trueOrFalse){\n            dispatch(updateLoading(trueOrFalse));\n        }\n    }\n}\n\nclass Home extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    async componentWillMount(){\n        this.props.updateLoading(true);\n        try {\n            await this.updateTasks();\n        } finally {\n            this.props.updateLoading(false);\n        }\n    }\n\n    async componentDidUpdate(prevState){\n        if (prevState.loading !== this.props.loading) return;\n        this.updateTasks(); \n    }\n\n    async updateTasks(){\n        this.props.updateLoading(false);\n        const tasks = await axios.get(URL);\n        this.sortTasksByOrder(tasks.data);\n        if (JSON.stringify(tasks.data) == JSON.stringify(this.props.tasks)) {\n            return;  \n        } \n        this.props.updateTasks(tasks.data);\n    }\n\n    sortTasksByOrder(taskList){\n        taskList.sort((firstTask, secondTask)=>{\n            return firstTask.order < secondTask.order ? -1 : firstTask.order > secondTask.order ? 1 : 0; \n        });\n    }\n\n    async completeTask(url, completed){\n        await axios.patch(url,\n        {\n            completed\n        });\n        await this.updateTasks();\n    }\n\n    async deleteCompletedTasks(){\n        this.props.updateLoading(true);\n        const completedTasks = this.props.tasks.filter(task=>task.completed);\n        try {\n            for(const completedTask of completedTasks){\n                await axios.delete(completedTask.url)\n            }\n        } finally {\n            this.props.updateLoading(false);\n        }\n        if (completedTasks.length === 0){\n            alert('Não existem tarefas completas no momento');\n            return;\n        }\n        await this.updateTasks();\n    }\n\n    async editTask(url, title){\n        if (title.length === 0) {\n            alert('A tarefa deve ter um título');\n        }\n        await axios.patch(url,\n        {\n            title\n        });\n        await this.updateTasks();\n    }\n\n    async deleteTask(url){\n        const confirmation = window.confirm('Tem certeza que deseja excluir?');\n        if (confirmation){\n            this.props.updateLoading(true);\n            try {\n                await axios.delete(url);\n                await this.updateTasks();\n            } finally {\n                this.props.updateLoading(false);\n            }\n        }\n    }\n\n    filterTasksCompleteds(){\n        return this.props.tasks.filter(task=>task.completed);\n    }\n\n    filterTasksNotCompleteds(){\n        return this.props.tasks.filter(task=>!task.completed);\n    }\n\n    render(){\n        return(\n            <>\n            {\n                this.props.loading ? <Spinner animation=\"border\" variant=\"info\" style={{position: 'absolute', zIndex: '1', left: '50%', top: '40%'}}/>\n                : null    \n            }\n            <Card>\n                <Card.Header>\n                    <Nav variant=\"tabs\" defaultActiveKey=\"#first\">\n                    <Nav.Item>\n                        <Nav.Link active={this.props.whichTableIsVisible === 1 ? true : false} onClick={() => this.props.changeVision(1)}><ListTask/></Nav.Link>\n                    </Nav.Item>\n                    <Nav.Item>\n                        <Nav.Link active={this.props.whichTableIsVisible === 2 ? true : false} onClick={() => this.props.changeVision(2)}><Exclamation/></Nav.Link>\n                    </Nav.Item>\n                    <Nav.Item>\n                        <Nav.Link active={this.props.whichTableIsVisible === 3 ? true : false} onClick={() => this.props.changeVision(3)}><Check/></Nav.Link>\n                    </Nav.Item>\n                    <Nav.Item>\n                        <Nav.Link active={this.props.whichTableIsVisible === 4 ? true : false} onClick={() => this.props.changeVision(4)}><CardText/></Nav.Link>\n                    </Nav.Item>\n                    </Nav>\n                </Card.Header>\n                <Card.Body>\n                    {this.props.whichTableIsVisible === 1 ? \n                    <Table\n                        title='Tarefas'\n                        deleteTask={url=>this.deleteTask(url)} \n                        completeTask={(url, completed)=>this.completeTask(url, completed)} \n                        editTask={(url, title)=>this.editTask(url, title)}\n                        tasks={this.props.tasks} \n                        completed='trueAndFalse'\n                        deleteCompletedTasks={()=>this.deleteCompletedTasks()}/> \n                    : this.props.whichTableIsVisible === 2 ? \n                    <Table\n                        title='A fazer'\n                        deleteTask={url=>this.deleteTask(url)} \n                        completeTask={(url, completed)=>this.completeTask(url, completed)}\n                        editTask={(url, title)=>this.editTask(url, title)}\n                        tasks={this.filterTasksNotCompleteds()}\n                        deleteCompletedTasks={()=>this.deleteCompletedTasks()}/> \n                        : this.props.whichTableIsVisible === 3 ? \n                    <Table \n                        title='Conluídas'\n                        deleteTask={url=>this.deleteTask(url)} \n                        completeTask={(url, completed)=>this.completeTask(url, completed)}\n                        editTask={(url, title)=>this.editTask(url, title)}\n                        tasks={this.filterTasksCompleteds()} \n                        completed={true}\n                        deleteCompletedTasks={()=>this.deleteCompletedTasks()}/> \n                    : <Form/>}\n                </Card.Body>\n            </Card>\n            </>\n        )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home)"]},"metadata":{},"sourceType":"module"}